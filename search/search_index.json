{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JoseKilo's Digital Garden This is a digital garden \ud83e\udd14","title":"JoseKilo's Digital Garden"},{"location":"#josekilos-digital-garden","text":"This is a digital garden \ud83e\udd14","title":"JoseKilo's Digital Garden"},{"location":"favorite-reads/","text":"Favoring articles Some articles that I find interesting (or that I found interesting at some point). In no particular order. Why the Vasa Sank: 10 Problems and Some Antidotes for Software Projects The Cathedral and the Bazaar Arrange Act Assert pattern for Python developers Part 1 and Part 2 Python 3 Metaprogramming The Grug Brained Developer How to Test A Business Venture Before Quitting Your Job Falsehoods Programmers Believe About Names The Right to Read","title":"Favoring articles"},{"location":"favorite-reads/#favoring-articles","text":"Some articles that I find interesting (or that I found interesting at some point). In no particular order. Why the Vasa Sank: 10 Problems and Some Antidotes for Software Projects The Cathedral and the Bazaar Arrange Act Assert pattern for Python developers Part 1 and Part 2 Python 3 Metaprogramming The Grug Brained Developer How to Test A Business Venture Before Quitting Your Job Falsehoods Programmers Believe About Names The Right to Read","title":"Favoring articles"},{"location":"how-to-test-infinite-loop/","text":"How-to test an infinite loop Let's say you have some code like this that you want to test: import time def runner (): while True : print ( \"Iterating\" ) time . sleep ( 0.1 ) There are several approaches if you want to (and can) modify the loop itself. For example, we can add a flag, so that the actual loop depends on it. And that flag can be set using some stop() method or by patching it during tests. But if you really can't modify the loop, there is an option using signals: import contextlib import signal class TimeoutException ( Exception ): pass def timeout_handler ( signum , frame ): raise TimeoutException @contextlib . contextmanager def timeout ( timeout ): signal . signal ( signal . SIGALRM , timeout_handler ) signal . alarm ( timeout ) with contextlib . suppress ( TimeoutException ): yield # Cancel signal if not yet triggered signal . alarm ( 0 ) You can use timeout in your tests like: def test_runner ( capsys ): with timeout ( 1 ): runner () captured = capsys . readouterr () assert captured . out . startswith ( \"Iterating\" ) But keep in mind that SIGALRM is only available in Unix systems.","title":"How-to test an infinite loop"},{"location":"how-to-test-infinite-loop/#how-to-test-an-infinite-loop","text":"Let's say you have some code like this that you want to test: import time def runner (): while True : print ( \"Iterating\" ) time . sleep ( 0.1 ) There are several approaches if you want to (and can) modify the loop itself. For example, we can add a flag, so that the actual loop depends on it. And that flag can be set using some stop() method or by patching it during tests. But if you really can't modify the loop, there is an option using signals: import contextlib import signal class TimeoutException ( Exception ): pass def timeout_handler ( signum , frame ): raise TimeoutException @contextlib . contextmanager def timeout ( timeout ): signal . signal ( signal . SIGALRM , timeout_handler ) signal . alarm ( timeout ) with contextlib . suppress ( TimeoutException ): yield # Cancel signal if not yet triggered signal . alarm ( 0 ) You can use timeout in your tests like: def test_runner ( capsys ): with timeout ( 1 ): runner () captured = capsys . readouterr () assert captured . out . startswith ( \"Iterating\" ) But keep in mind that SIGALRM is only available in Unix systems.","title":"How-to test an infinite loop"},{"location":"me/","text":"Me A little about me: I finished studying in 2013. I started working in 2011. I haven't stopped working since then. I haven't stopped learning since then.","title":"Me"},{"location":"me/#me","text":"A little about me: I finished studying in 2013. I started working in 2011. I haven't stopped working since then. I haven't stopped learning since then.","title":"Me"},{"location":"mkdocs/","text":"MkDocs These pages are rendered using MkDocs , a tool originally intended to publish documentation for technical projects. However, it can be used to generate static sites in general. I was inspired to follow this strategy after seeing Tiger's Digital Garden , which uses the same tool. Why did I like this idea ? MkDocs works by rendering Markdown files to generate each of the site's pages. I'm very used to writing documentation using Markdown after years working on tech projects. I like working with Markdown because it's very simple and allows me to focus on the content rather than the format of the text. Usually blog-like pages rely on complex user-interfaces to tweak almost every detail of the site. I only need Vim (my preferred text editor) to add new notes to this site. MkDocs also comes with built-in support to upload the generated site directly to GitHub Pages, which I'm using for hosting. That's one technical complexity less to distract me from the actual content. Since MkDocs original intent is sharing technical documentation, the site gets some navigational features for free, like the list of notes, the table of contents, the text search, etc. Which I think are very useful for exploring this kind of mental notes, while being simple enough to not get in the way. Since the source files are basically text files, I can use git to keep a history of the changes, in case I need to come back and review some previous version or revert any changes. The same source files can be made available in a public repository in GitHub , which allows the history and tools configuration to be shared. I think this aligns with the goal of working with the garage door up .","title":"MkDocs"},{"location":"mkdocs/#mkdocs","text":"These pages are rendered using MkDocs , a tool originally intended to publish documentation for technical projects. However, it can be used to generate static sites in general. I was inspired to follow this strategy after seeing Tiger's Digital Garden , which uses the same tool.","title":"MkDocs"},{"location":"mkdocs/#why-did-i-like-this-idea","text":"MkDocs works by rendering Markdown files to generate each of the site's pages. I'm very used to writing documentation using Markdown after years working on tech projects. I like working with Markdown because it's very simple and allows me to focus on the content rather than the format of the text. Usually blog-like pages rely on complex user-interfaces to tweak almost every detail of the site. I only need Vim (my preferred text editor) to add new notes to this site. MkDocs also comes with built-in support to upload the generated site directly to GitHub Pages, which I'm using for hosting. That's one technical complexity less to distract me from the actual content. Since MkDocs original intent is sharing technical documentation, the site gets some navigational features for free, like the list of notes, the table of contents, the text search, etc. Which I think are very useful for exploring this kind of mental notes, while being simple enough to not get in the way. Since the source files are basically text files, I can use git to keep a history of the changes, in case I need to come back and review some previous version or revert any changes. The same source files can be made available in a public repository in GitHub , which allows the history and tools configuration to be shared. I think this aligns with the goal of working with the garage door up .","title":"Why did I like this idea ?"},{"location":"projects/","text":"Projects When choosing a project, remember to consider: Personal interests and passions Available resources (tools/materials/skills) Timeframe for completion VS size of the project Potential impact or relevance Constraints imposed by external factors Choosing a project when limited in time If I only have a few hours to spare, remember to: Prioritize urgent tasks Work on projects with momentum Choose small, achievable goals Rotate through different projects Track tasks, ideas and random thoughts in some way How to create momentum for a project Set clear and measurable goals Break down larger tasks into smaller, more manageable steps Celebrate wins along the way Establish routines and habits Get buy-in from others Use visual reminders Track your progress Tackle urgent tasks Create a timeline for completing the project (milestones, deadlines, etc). Identify quick wins that can be achieved quickly and easily If everything else fails start with some small but useful meta task, for example: Upgrade dependencies Document Write missing tests Configure your editor On-going tasks Identify challenges and roadblocks. Prioritize tasks based on their importance and urgency. Look for opportunities for using existing knowledge and experience.","title":"Projects"},{"location":"projects/#projects","text":"When choosing a project, remember to consider: Personal interests and passions Available resources (tools/materials/skills) Timeframe for completion VS size of the project Potential impact or relevance Constraints imposed by external factors","title":"Projects"},{"location":"projects/#choosing-a-project-when-limited-in-time","text":"If I only have a few hours to spare, remember to: Prioritize urgent tasks Work on projects with momentum Choose small, achievable goals Rotate through different projects Track tasks, ideas and random thoughts in some way","title":"Choosing a project when limited in time"},{"location":"projects/#how-to-create-momentum-for-a-project","text":"Set clear and measurable goals Break down larger tasks into smaller, more manageable steps Celebrate wins along the way Establish routines and habits Get buy-in from others Use visual reminders Track your progress Tackle urgent tasks Create a timeline for completing the project (milestones, deadlines, etc). Identify quick wins that can be achieved quickly and easily If everything else fails start with some small but useful meta task, for example: Upgrade dependencies Document Write missing tests Configure your editor","title":"How to create momentum for a project"},{"location":"projects/#on-going-tasks","text":"Identify challenges and roadblocks. Prioritize tasks based on their importance and urgency. Look for opportunities for using existing knowledge and experience.","title":"On-going tasks"},{"location":"trek/","text":"Star Trek I love Star Trek. I recommend watching in production order: Original Series Animated Series Original Series Movies (there are 6) Next Generation Next Generation Movies (there are 4) Deep Space Nine Voyager Enterprise Discovery","title":"Star Trek"},{"location":"trek/#star-trek","text":"I love Star Trek. I recommend watching in production order: Original Series Animated Series Original Series Movies (there are 6) Next Generation Next Generation Movies (there are 4) Deep Space Nine Voyager Enterprise Discovery","title":"Star Trek"}]}